that is , hard-wired requests should be avoided see also the uml class and sequence diagram below in the above uml class diagram , the invoker class does n't implement a request directly when the user wants to undo a command , the program simply pops the most recent command object and executes its method should one of them fail , all others can be reversed or discarded ( usually called rollback ) for example , if two database tables that refer to each other must be updated , and the second update fails , the transaction can be rolled back , so that the first table does not now contain an invalid reference each wizard page stores its gui changes in the command object , so the object is populated as the user progresses the term command is ambiguous this may be appropriate when each object on the stack must contain information that allows the command to be undone that occurs only after some further event processing related to the command command object , routed event arguments , event object : the object that is passed from the source to the command/action object , to the target object to the code that does the work each button click or shortcut key results in a new command/event object copycommand ) to another ( e.g in other implementations the code is part of the receiver/target object , and in yet other implementations the handler code is kept separate from the other objects command manager , undo manager , scheduler , queue , dispatcher , invoker : an object that puts command/event objects on an undo stack or redo stack , or that holds on to command/event objects until other objects are ready to act on them , or that routes the command/event objects to the appropriate receiver/target object or handler code implementations that go well beyond the original command pattern the switch in the following c implementation turns a light on and off , but the switch 's constructor is able to accept any subclasses of command for its two parameters