when a student has finished using a room , the student must return to the desk and indicate that one room has become free when a student requests a room , the clerk decreases this number this includes : requesting a resource and forgetting to release it ; releasing a resource that was never requested ; holding a resource for a long time without needing it ; using a resource without requesting it first ( or after releasing it ) even if all processes follow these rules , multi-resource deadlock may still occur when there are different resources managed by different semaphores and when processes need to use more than one resource at a time , as illustrated by the dining philosophers problem counting semaphores are equipped with two operations , historically denoted as p and v ( see for alternative names ) , added to the semaphore 's queue ) : increments the value of semaphore variable by 1 after the increment , if the pre-increment value was negative ( meaning there are processes waiting for a resource ) , it transfers a blocked process from the semaphore 's waiting queue to the ready queue the counting semaphore concept can be extended with the ability to claim or return more than one '' unit '' from the semaphore , a technique implemented in unix if the implementation does not ensure atomicity of the increment , decrement and comparison operations , then there is a risk of increments or decrements being forgotten , or of the semaphore value becoming negative consider a variable a and a boolean variable s if it is yellow or red ( or any other color ) , the train station can not be accessed whenever s becomes greater than 0 ( login slots available ) , a login request is dequeued , and the user owning the request is allowed to log in the semaphore solution to the producer–consumer problem tracks the state of the queue with two semaphores : emptycount , the number of empty places in the queue , and fullcount , the number of elements in the queue alternatively a mutex could be used in place of the binary semaphore the producer does the following repeatedly : produce : p ( emptycount ) p ( usequeue ) putitemintoqueue ( item ) v ( usequeue ) v ( fullcount ) the consumer does the following repeatedly consume : p ( fullcount ) p ( usequeue ) item ← getitemfromqueue ( ) v ( usequeue ) v ( emptycount ) below is a substantive example : a single consumer enters its critical section dijkstra 's earliest paper on the subject gives passering ( '' passing '' ) as the meaning for p , and vrijgave ( '' release '' ) as the meaning for v '' ( patch 1/19 ) mutex : introduce simple mutex implementation linux kernel mailing list , 19 december 2005 in algol 68 , the linux kernel , linux kernel hacking howto linuxgrill.com and in some english textbooks , the v and p operations are called , respectively , up and down the differences between them are in how they are used termination deadlock : if a mutex-holding task terminates for any reason , the os can release the mutex and signal waiting tasks of this condition