in python , a generator is an iterator constructor : a function that returns an iterator implicit iterators are often manifested by a '' foreach '' statement ( or equivalent ) , such as in the following python example : for value in iterable : print ( value ) in python , an iterable is an object which can be converted to an iterator , which is then iterated through during the for loop ; this is done implicitly iterators are a useful abstraction of input streams â€“ they provide a potentially infinite iterable ( but not necessarily indexable ) object in python , iterators are objects representing streams of data alternative implementations of stream include data-driven languages , such as awk and sed an alternative way to keep the number of updates bound relatively to the container size would be to use a kind of handle mechanism , that is a collection of indirect pointers to the container 's elements that must be updated with the container , and let the iterators point to these handles instead of directly to the data elements but this approach will negatively impact the iterator performance , since it must effectuate a double pointer following to access the actual data element this is usually not desirable , because many algorithms using the iterators invoke the iterators data access operation more often than the advance method iterators can be categorised according to their functionality java 's iterator , iterable and listiterator explained net interface article '' understanding and using iterators '' by joshua gatcomb article '' a technique for generic iteration and its optimization '' ( 217 kb ) by stephen m